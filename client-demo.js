const axios = require("axios");

const BASE_URL = process.env.GATEWAY_URL || "http://localhost:3000";
const DEMO_EMAIL = `demo${Date.now()}@example.com`;
const DEMO_USERNAME = `user${Date.now()}`;

// Configura√ß√£o do axios para timeouts
axios.defaults.timeout = 10000;

async function main() {
  try {
    console.log("üöÄ === DEMONSTRA√á√ÉO COMPLETA DO SISTEMA ===\n");
    console.log(`üîó Gateway: ${BASE_URL}`);
    console.log(`üìß Usu√°rio demo: ${DEMO_EMAIL}`);
    console.log("‚îÄ".repeat(50));

    // 1. Health Check do sistema
    console.log("1. üìä VERIFICANDO SA√öDE DO SISTEMA");
    console.log("   üìç Health Check do gateway...");
    let healthRes = await axios.get(`${BASE_URL}/health`);
    console.log("   ‚úÖ Gateway status:", healthRes.data.status);
    console.log("   üè• Servi√ßos registrados:", Object.keys(healthRes.data.servicos || {}).join(", "));

    console.log("   üìç Registry status...");
    const registryRes = await axios.get(`${BASE_URL}/registry`);
    console.log("   ‚úÖ Registry encontrado com", Object.keys(registryRes.data).length, "servi√ßos");

    // 2. Registrar usu√°rio
    console.log("\n2. üë§ REGISTRO DE USU√ÅRIO");
    console.log("   üìß Email:", DEMO_EMAIL);
    console.log("   üë§ Username:", DEMO_USERNAME);
    
    let registerRes;
    try {
      registerRes = await axios.post(`${BASE_URL}/api/auth/register`, {
        email: DEMO_EMAIL,
        username: DEMO_USERNAME,
        password: "SenhaSegura123!",
        firstName: "Demo",
        lastName: "User",
        phone: "+5511999999999",
        preferences: {
          defaultStore: "Supermercado Central",
          currency: "BRL",
          notifications: true
        }
      });
      console.log("   ‚úÖ USU√ÅRIO CRIADO - ID:", registerRes.data.usuario.id);
    } catch (err) {
      if (err.response?.status === 409) {
        console.log("   ‚ö†Ô∏è  Usu√°rio j√° existe, realizando login...");
      } else {
        throw err;
      }
    }

    // 3. Login
    console.log("\n3. üîê LOGIN");
    const loginRes = await axios.post(`${BASE_URL}/api/auth/login`, {
      email: DEMO_EMAIL,
      password: "SenhaSegura123!"
    });
    
    const token = loginRes.data.token;
    const user = loginRes.data.usuario;
    const authHeader = { headers: { Authorization: `Bearer ${token}` } };
    
    console.log("   ‚úÖ LOGIN BEM-SUCEDIDO");
    console.log("   üÜî User ID:", user.id);
    console.log("   üë§ Nome:", `${user.firstName} ${user.lastName}`);
    console.log("   üîê Token length:", token.length);

    // 4. Buscar categorias dispon√≠veis
    console.log("\n4. üè∑Ô∏è  CATEGORIAS DISPON√çVEIS");
    const categoriesRes = await axios.get(`${BASE_URL}/api/categories`);
    console.log("   üìã Categorias:", categoriesRes.data.join(", "));

    // 5. Buscar itens por categoria
    console.log("\n5. üõí ITENS POR CATEGORIA");
    const categoriesToTest = categoriesRes.data.slice(0, 3); // Testa as 3 primeiras categorias
    
    for (const category of categoriesToTest) {
      console.log(`   üì¶ Itens da categoria "${category}":`);
      const itemsRes = await axios.get(`${BASE_URL}/api/items?category=${encodeURIComponent(category)}`);
      console.log(`      ‚úÖ ${itemsRes.data.length} itens encontrados`);
      
      if (itemsRes.data.length > 0) {
        console.log(`      üéØ Primeiro item: ${itemsRes.data[0].name} (R$ ${itemsRes.data[0].averagePrice})`);
      }
    }

    // 6. Buscar todos os itens
    console.log("\n6. üì¶ TODOS OS ITENS");
    const allItemsRes = await axios.get(`${BASE_URL}/api/items`);
    console.log("   ‚úÖ Total de itens no sistema:", allItemsRes.data.length);

    // 7. Criar lista de compras
    console.log("\n7. üìù CRIANDO LISTA DE COMPRAS");
    const listData = {
      name: `Lista Semanal - ${new Date().toLocaleDateString()}`,
      description: "Lista de compras criada via demonstra√ß√£o",
      isPublic: true,
      tags: ["semanal", "demo", "supermercado"]
    };

    const listRes = await axios.post(`${BASE_URL}/api/lists`, listData, authHeader);
    const listId = listRes.data.id;
    console.log("   ‚úÖ LISTA CRIADA");
    console.log("   üÜî List ID:", listId);
    console.log("   üìã Nome:", listRes.data.name);
    console.log("   üîó P√∫blica:", listRes.data.isPublic ? "Sim" : "N√£o");

    // 8. Adicionar m√∫ltiplos itens √† lista
    console.log("\n8. ‚ûï ADICIONANDO ITENS √Ä LISTA");
    const itemsToAdd = allItemsRes.data.slice(0, 5); // Adiciona os 5 primeiros itens
    
    for (const [index, item] of itemsToAdd.entries()) {
      const addItemRes = await axios.post(
        `${BASE_URL}/api/lists/${listId}/items`,
        {
          itemId: item.id,
          quantity: index + 1,
          unit: item.unit || "un",
          notes: `Item ${index + 1} adicionado via demo`
        },
        authHeader
      );
      console.log(`   ‚úÖ Item ${index + 1}: ${addItemRes.data.itemName} (${addItemRes.data.quantity} ${addItemRes.data.unit})`);
    }

    // 9. Resumo da lista
    console.log("\n9. üìä RESUMO DA LISTA");
    const summaryRes = await axios.get(`${BASE_URL}/api/lists/${listId}/summary`, authHeader);
    console.log("   üì¶ Total de itens:", summaryRes.data.totalItems);
    console.log("   ‚úÖ Itens comprados:", summaryRes.data.purchasedItems);
    console.log("   üí∞ Total estimado: R$", summaryRes.data.estimatedTotal?.toFixed(2) || "0.00");

    // 10. Detalhes completos da lista
    console.log("\n10. üîç DETALHES DA LISTA");
    const listDetailsRes = await axios.get(`${BASE_URL}/api/lists/${listId}`, authHeader);
    console.log("   üìã Itens na lista:", listDetailsRes.data.items?.length || 0);
    console.log("   üè∑Ô∏è  Tags:", listDetailsRes.data.tags?.join(", ") || "Nenhuma");
    console.log("   üìÖ Criada em:", new Date(listDetailsRes.data.createdAt).toLocaleString());

    // 11. Dashboard do sistema
    console.log("\n11. üìà DASHBOARD DO SISTEMA");
    const dashboardRes = await axios.get(`${BASE_URL}/api/dashboard`);
    console.log("   üè• Servi√ßos ativos:", Object.keys(dashboardRes.data.servicos || {}).length);
    console.log("   üìä Estat√≠sticas:", JSON.stringify(dashboardRes.data.estatisticas));
    console.log("   ‚è∞ √öltima atualiza√ß√£o:", dashboardRes.data.timestamp);

    // 12. Busca global
    console.log("\n12. üîç BUSCA GLOBAL");
    const searchTerm = allItemsRes.data[0]?.name?.split(" ")[0] || "arroz";
    const searchRes = await axios.get(`${BASE_URL}/api/search?q=${encodeURIComponent(searchTerm)}`);
    console.log("   üîé Termo buscado:", searchTerm);
    console.log("   üì¶ Itens encontrados:", searchRes.data.items?.length || 0);
    console.log("   üìã Listas encontradas:", searchRes.data.lists?.length || 0);

    // 13. Listar todas as listas do usu√°rio
    console.log("\n13. üìã LISTAS DO USU√ÅRIO");
    const userListsRes = await axios.get(`${BASE_URL}/api/lists`, authHeader);
    console.log("   ‚úÖ Total de listas:", userListsRes.data.length);
    userListsRes.data.forEach((list, idx) => {
      console.log(`      ${idx + 1}. ${list.name} (${list.items?.length || 0} itens)`);
    });

    // 14. Health check final
    console.log("\n14. üèÅ HEALTH CHECK FINAL");
    const finalHealthRes = await axios.get(`${BASE_URL}/health`);
    const servicosFinal = finalHealthRes.data.servicos || {};
    console.log("   ‚úÖ Status final:", finalHealthRes.data.status);
    console.log("   üü¢ Servi√ßos healthy:", Object.values(servicosFinal).filter(s => s.healthy).length);
    console.log("   üî¥ Servi√ßos unhealthy:", Object.values(servicosFinal).filter(s => !s.healthy).length);

    console.log("\n" + "‚ïê".repeat(50));
    console.log("üéâ DEMONSTRA√á√ÉO CONCLU√çDA COM SUCESSO!");
    console.log("‚ïê".repeat(50));
    console.log("üìä RESUMO DA EXECU√á√ÉO:");
    console.log("   ‚úÖ Usu√°rio criado e autenticado");
    console.log("   ‚úÖ", allItemsRes.data.length, "itens carregados");
    console.log("   ‚úÖ", categoriesRes.data.length, "categorias encontradas");
    console.log("   ‚úÖ Lista criada com", itemsToAdd.length, "itens");
    console.log("   ‚úÖ Todos os servi√ßos operacionais");
    console.log("\nüîó URLs TESTADAS:");
    console.log(`   Health: ${BASE_URL}/health`);
    console.log(`   Itens: ${BASE_URL}/api/items`);
    console.log(`   Listas: ${BASE_URL}/api/lists`);
    console.log(`   Dashboard: ${BASE_URL}/api/dashboard`);

  } catch (error) {
    console.error("\n‚ùå ERRO NA DEMONSTRA√á√ÉO:");
    
    if (error.response) {
      console.error("   üìä Status:", error.response.status);
      console.error("   üìù Resposta:", JSON.stringify(error.response.data, null, 2));
      console.error("   üîó URL:", error.response.config?.url);
    } else if (error.request) {
      console.error("   üåê Timeout/Sem resposta do servidor");
      console.error("   üîó URL:", error.request._currentUrl || error.config?.url);
    } else {
      console.error("   üíª Erro:", error.message);
    }
    
    console.error("   üêõ Stack:", error.stack);
    process.exit(1);
  }
}

process.on('SIGINT', () => {
  console.log('\nüõë Demonstra√ß√£o interrompida pelo usu√°rio');
  process.exit(0);
});

process.on('uncaughtException', (error) => {
  console.error('\nüí• Erro n√£o tratado:', error.message);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('\n‚ö†Ô∏è  Promise rejeitada n√£o tratada:', reason);
  process.exit(1);
});

main();
